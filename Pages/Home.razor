@page "/"

@inject IJSRuntime JSRuntime

<PageTitle>Ghoti Translator</PageTitle>

<h1 class="text-center">Ghoti Translator</h1>

<div class="form-group">
    <h2>Input</h2>

    <textarea @bind="InputText" placeholder="Enter text to translate" class="form-control mb-2"></textarea>
    <button @onclick="Translate" class="btn btn-primary">Translate</button>
</div>


<div class="form-group">
    <h2>Translation</h2>

    <textarea @bind="TranslatedText" placeholder="Translated result will go here" readonly class="form-control mb-2"></textarea>
    <button @onclick="CopyToClipboard" class="btn btn-dark">Copy</button>
</div>


@* Idea/TODO: consider making this hoverable/highlightable as a pop-up word by word in the translated text section above *@
@if (TranslatedText.Length > 0) 
{
    <div>
        <h3>Spelling rules used</h3>

        @if (usedRules.Count == 0)
        {
            <p>No conversion rules used</p>
        } 
        
        else 
        {
            <ul>
                @* TODO: work on how this is shown, make it easier to show either way of the translation *@
                @foreach (var rule in usedRules) 
                {
                    @if (@Rules.Pronunciation.ContainsKey(rule.original) && @Rules.Pronunciation[rule.original].ContainsKey(rule.transformed))
                    {
                        <li>@rule.original → @rule.transformed (@Rules.Pronunciation[rule.original][rule.transformed])</li>
                    }
                }
            </ul>
        }
    </div>
}

<div>
    <h4>Explanation/Disclaimer:</h4>
    <p>
        This is a fun project to demonstrate how the English language can be confusing. The rules used here are not exhaustive and are not accurate in many cases.
        This is because normally the 'ghoti' rules are based off phonemes, not English spelling. Maybe this will be added in the future...
    </p>

    <p class="mt-2">
        For more reading, see the below resources:
        <ul>
            <li><a href="https://en.wikipedia.org/wiki/Ghoti" target="_blank">Wikipedia - Ghoti</a></li>
            <li><a href="https://www.youtube.com/watch?v=3ipFdRfFvK4" target="_blank">Vsauce - Forbidden Spellings</a></li>
            <li><a href="https://www.readingrockets.org/sites/default/files/migrated/the-44-phonemes-of-english.pdf"- target="_blank">Reading Rockets - The 44 Sounds (Phonemes) of English</a></li>
        </ul>
    </p>
</div>

@code {
    private string InputText { get; set; } = string.Empty;
    private string TranslatedText { get; set; } = string.Empty;

    private List<(string original, string transformed)> usedRules = new List<(string, string)>();
     private void Translate()
    {
        TranslatedText = string.Empty;
        Random random = new Random();
        int i = 0;

        usedRules.Clear();

        while (i < InputText.Length)
        {
            bool matched = false;

            // Check both dictionaries, prioritizing longest matches
            foreach (var ruleSet in Rules.Spelling.OrderByDescending(r => r.Key.Length))
            {
                if (i + ruleSet.Key.Length <= InputText.Length && InputText.Substring(i, ruleSet.Key.Length).ToLower() == ruleSet.Key.ToLower())
                {
                    // Get a random transformation from the available options
                    string replacement = ruleSet.Value.ElementAt(random.Next(ruleSet.Value.Count));

                    TranslatedText += replacement;

                    // Store the applied rule for reference
                    usedRules.Add((ruleSet.Key.ToLower(), replacement));

                    // Advance by the length of the matched key
                    i += ruleSet.Key.Length;
                    matched = true;
                    break;
                }
            }

            // If no match found, add the current character and move forward
            if (!matched)
            {
                TranslatedText += InputText[i];
                i++;
            }
        }

        @* Console.WriteLine($"Translated text: {TranslatedText}, from original: {InputText}");
        Console.WriteLine("Spelling rules used: {0}", String.Join(',', usedRules)); *@
        
    }

    private void CopyToClipboard()
    {
        JSRuntime.InvokeVoidAsync("CopyToClipboard.copyToClipboard", TranslatedText);
    }
}